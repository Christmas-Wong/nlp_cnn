Building prefix dict from the default dictionary ...
Loading model from cache C:\Users\chris\AppData\Local\Temp\jieba.cache
Loading model cost 0.323 seconds.
Prefix dict has been built successfully.



100%|██████████| 53360/53360 [00:08<00:00, 6646.87it/s]
[32m2022-03-19 22:37:22.942[39m | [1mINFO    [22m | [36msource.embedding.word2vec[39m:[36mword2vec_train[39m:[36m28[39m - [1mWord2vec Training Start 
[32m2022-03-19 22:37:50.944[39m | [1mINFO    [22m | [36msource.embedding.word2vec[39m:[36mword2vec_train[39m:[36m45[39m - [1mWord2vec Training End, Cost【28.00202703475952】Seconds 
100%|██████████| 31844/31844 [00:00<00:00, 236580.09it/s]
  0%|          | 0/100 [00:00<?, ?it/s]
  0%|          | 0/100 [00:15<?, ?it/s]
Traceback (most recent call last):
  File "D:\app\pycharm\PyCharm 2021.3.2\plugins\python\helpers\pydev\pydevd.py", line 1483, in _exec
    pydev_imports.execfile(file, globals, locals)  # execute the script
  File "D:\app\pycharm\PyCharm 2021.3.2\plugins\python\helpers\pydev\_pydev_imps\_pydev_execfile.py", line 18, in execfile
    exec(compile(contents+"\n", file, 'exec'), glob, loc)
  File "E:/project/nlp_cnn-main/python_runner.py", line 21, in <module>
    run(config)
  File "E:\project\nlp_cnn-main\source\pipeline\classification.py", line 116, in run
    trainer.train()
  File "E:\project\nlp_cnn-main\source\core\trainer.py", line 56, in train
    logits = self.model(batch_x)
  File "D:\app\conda\envs\pytorch\lib\site-packages\torch\nn\modules\module.py", line 1102, in _call_impl
    return forward_call(*input, **kwargs)
  File "E:\project\nlp_cnn-main\source\model\dpcnn.py", line 119, in forward
    x = self.resnet_layer(x)
  File "D:\app\conda\envs\pytorch\lib\site-packages\torch\nn\modules\module.py", line 1102, in _call_impl
    return forward_call(*input, **kwargs)
  File "D:\app\conda\envs\pytorch\lib\site-packages\torch\nn\modules\container.py", line 141, in forward
    input = module(input)
  File "D:\app\conda\envs\pytorch\lib\site-packages\torch\nn\modules\module.py", line 1102, in _call_impl
    return forward_call(*input, **kwargs)
  File "E:\project\nlp_cnn-main\source\model\dpcnn.py", line 37, in forward
    x_shortcut = self.maxpool(x)
  File "D:\app\conda\envs\pytorch\lib\site-packages\torch\nn\modules\module.py", line 1102, in _call_impl
    return forward_call(*input, **kwargs)
  File "D:\app\conda\envs\pytorch\lib\site-packages\torch\nn\modules\container.py", line 141, in forward
    input = module(input)
  File "D:\app\conda\envs\pytorch\lib\site-packages\torch\nn\modules\module.py", line 1102, in _call_impl
    return forward_call(*input, **kwargs)
  File "D:\app\conda\envs\pytorch\lib\site-packages\torch\nn\modules\pooling.py", line 88, in forward
    return F.max_pool1d(input, self.kernel_size, self.stride,
  File "D:\app\conda\envs\pytorch\lib\site-packages\torch\_jit_internal.py", line 422, in fn
    return if_false(*args, **kwargs)
  File "D:\app\conda\envs\pytorch\lib\site-packages\torch\nn\functional.py", line 653, in _max_pool1d
    return torch.max_pool1d(input, kernel_size, stride, padding, dilation, ceil_mode)
